Use ghidra to write it logic of ./brute.
Logic:

flag=input()

local_14=[0,0,0,0]
for i in range(0xABCF00D,0xDEADBEEF,0x1FAB4D):
	local_14[0]^=(i>>0x18)%0x100
	local_14[1]^=(i>>0x10)%0x100
	local_14[2]^=(i>>0x8)%0x100
	local_14[3]^=(i)%0x100

	for i in range(30):
		flag[i]^=local_14[i&3]

for i in range(1,30):
	x=30//i*i
	for j in range(0,x,i):
		flag[j],flag[j+i-1]=flag[j+i-1],flag[j]

result=[0x7A, 0x2E, 0x6E, 0x68, 0x1D, 0x65, 0x16, 0x7C, 0x6D, 0x43, 
  0x6F, 0x36, 0x66, 0x62, 0x14, 0x47, 0x43, 0x37, 0x40, 0x34, 
  0x58, 0x01, 0x58, 0x65, 0x62, 0x6F, 0x53, 0x30, 0x67, 0x17]

for i in range(30):
	assert flag[i]==result[i]

So we reverse it.
In sol.py.
Get the flag.
picoCTF{I_5D3_A11DA7_0db137a9}